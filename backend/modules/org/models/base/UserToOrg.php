<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace backend\modules\org\models\base;

use Yii;
use yii\behaviors\TimestampBehavior;

/**
 * This is the base-model class for table "user_to_org".
 *
 * @property integer $user_to_ort_id
 * @property integer $org_id
 * @property integer $user_id
 * @property string $org_title
 * @property string $role_name
 * @property string $status
 * @property integer $updated_at
 * @property integer $created_at
 *
 * @property \backend\modules\org\models\Organization $org
 * @property \backend\modules\org\models\OrgUser $user
 * @property string $aliasModel
 */
abstract class UserToOrg extends \yii\db\ActiveRecord
{



    /**
    * ENUM field values
    */
    const ROLE_NAME_STUDENT = 'student';
    const ROLE_NAME_TEACHER = 'teacher';
    const ROLE_NAME_AGENCY = 'agency';
    const ROLE_NAME_PROVIDER = 'provider';
    const ROLE_NAME_EMPLOYEE = 'employee';
    const STATUS_ACTIVE = 'active';
    const STATUS_CLOSE = 'close';
    const STATUS_DELETE = 'delete';
    var $enum_labels = false;
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'user_to_org';
    }

    /**
     * @return \yii\db\Connection the database connection used by this AR class.
     */
    public static function getDb()
    {
        return Yii::$app->get('org');
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            [
                'class' => TimestampBehavior::class,
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['org_id', 'user_id'], 'integer'],
            [['role_name', 'status'], 'string'],
            [['org_title'], 'string', 'max' => 255],
            [['user_id', 'org_id', 'role_name'], 'unique', 'targetAttribute' => ['user_id', 'org_id', 'role_name']],
            [['org_id'], 'exist', 'skipOnError' => true, 'targetClass' => \backend\modules\org\models\Organization::className(), 'targetAttribute' => ['org_id' => 'org_id']],
            [['user_id'], 'exist', 'skipOnError' => true, 'targetClass' => \backend\modules\org\models\OrgUser::className(), 'targetAttribute' => ['user_id' => 'user_id']],
            ['role_name', 'in', 'range' => [
                    self::ROLE_NAME_STUDENT,
                    self::ROLE_NAME_TEACHER,
                    self::ROLE_NAME_AGENCY,
                    self::ROLE_NAME_PROVIDER,
                    self::ROLE_NAME_EMPLOYEE,
                ]
            ],
            ['status', 'in', 'range' => [
                    self::STATUS_ACTIVE,
                    self::STATUS_CLOSE,
                    self::STATUS_DELETE,
                ]
            ]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'user_to_ort_id' => Yii::t('backend', 'User To Ort ID'),
            'org_id' => Yii::t('backend', 'Org ID'),
            'user_id' => Yii::t('backend', 'User ID'),
            'org_title' => Yii::t('backend', 'Org Title'),
            'role_name' => Yii::t('backend', 'Role Name'),
            'status' => Yii::t('backend', 'Status'),
            'updated_at' => Yii::t('backend', 'Updated At'),
            'created_at' => Yii::t('backend', 'Created At'),
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeHints()
    {
        return array_merge(parent::attributeHints(), [
            'org_id' => Yii::t('backend', '机构ID'),
            'user_id' => Yii::t('backend', '用户ID'),
            'org_title' => Yii::t('backend', '机构名称'),
            'role_name' => Yii::t('backend', '名称'),
            'status' => Yii::t('backend', '状态'),
            'updated_at' => Yii::t('backend', '更新时间'),
            'created_at' => Yii::t('backend', '创建时间'),
        ]);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getOrg()
    {
        return $this->hasOne(\backend\modules\org\models\Organization::className(), ['org_id' => 'org_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUser()
    {
        return $this->hasOne(\backend\modules\org\models\OrgUser::className(), ['user_id' => 'user_id']);
    }


    
    /**
     * @inheritdoc
     * @return \backend\modules\org\models\query\UserToOrgQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new \backend\modules\org\models\query\UserToOrgQuery(get_called_class());
    }


    /**
     * get column role_name enum value label
     * @param string $value
     * @return string
     */
    public static function getRoleNameValueLabel($value){
        $labels = self::optsRoleName();
        if(isset($labels[$value])){
            return $labels[$value];
        }
        return $value;
    }

    /**
     * column role_name ENUM value labels
     * @return array
     */
    public static function optsRoleName()
    {
        return [
            self::ROLE_NAME_STUDENT => Yii::t('backend', 'Student'),
            self::ROLE_NAME_TEACHER => Yii::t('backend', 'Teacher'),
            self::ROLE_NAME_AGENCY => Yii::t('backend', 'Agency'),
            self::ROLE_NAME_PROVIDER => Yii::t('backend', 'Provider'),
            self::ROLE_NAME_EMPLOYEE => Yii::t('backend', 'Employee'),
        ];
    }

    /**
     * get column status enum value label
     * @param string $value
     * @return string
     */
    public static function getStatusValueLabel($value){
        $labels = self::optsStatus();
        if(isset($labels[$value])){
            return $labels[$value];
        }
        return $value;
    }

    /**
     * column status ENUM value labels
     * @return array
     */
    public static function optsStatus()
    {
        return [
            self::STATUS_ACTIVE => Yii::t('backend', 'Active'),
            self::STATUS_CLOSE => Yii::t('backend', 'Close'),
            self::STATUS_DELETE => Yii::t('backend', 'Delete'),
        ];
    }

}
