<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace backend\modules\org\models\base;

use Yii;
use yii\behaviors\BlameableBehavior;
use yii\behaviors\TimestampBehavior;

/**
 * This is the base-model class for table "organization".
 *
 * @property integer $org_id
 * @property integer $org_parent_id
 * @property string $title
 * @property string $home_site
 * @property string $school_logo_src
 * @property string $country
 * @property string $address
 * @property string $inland_phone
 * @property string $foreign_phone
 * @property string $email
 * @property integer $created_id
 * @property string $status
 * @property integer $sort
 * @property integer $created_at
 * @property integer $updated_at
 * @property integer $created_by
 * @property integer $updated_by
 *
 * @property \backend\modules\org\models\Course[] $courses
 * @property \backend\modules\org\models\Dormitory[] $dormitories
 * @property \backend\modules\org\models\Order[] $orders
 * @property \backend\modules\org\models\UserCourse[] $userCourses
 * @property \backend\modules\org\models\UserDormitory[] $userDormitories
 * @property \backend\modules\org\models\UserFlight[] $userFlights
 * @property \backend\modules\org\models\UserToOrg[] $userToOrgs
 * @property string $aliasModel
 */
abstract class Organization extends \yii\db\ActiveRecord
{



    /**
    * ENUM field values
    */
    const STATUS_ACTIVE = 'active';
    const STATUS_CLOSE = 'close';
    const STATUS_DELETE = 'delete';
    var $enum_labels = false;
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'organization';
    }

    /**
     * @return \yii\db\Connection the database connection used by this AR class.
     */
    public static function getDb()
    {
        return Yii::$app->get('org');
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            [
                'class' => BlameableBehavior::class,
            ],
            [
                'class' => TimestampBehavior::class,
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['org_parent_id', 'created_id', 'sort'], 'integer'],
            [['country', 'created_id'], 'required'],
            [['status'], 'string'],
            [['title', 'country', 'address', 'inland_phone', 'foreign_phone', 'email'], 'string', 'max' => 255],
            [['home_site'], 'string', 'max' => 512],
            [['school_logo_src'], 'string', 'max' => 1024],
            ['status', 'in', 'range' => [
                    self::STATUS_ACTIVE,
                    self::STATUS_CLOSE,
                    self::STATUS_DELETE,
                ]
            ]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'org_id' => Yii::t('backend', 'Org ID'),
            'org_parent_id' => Yii::t('backend', 'Org Parent ID'),
            'title' => Yii::t('backend', 'Title'),
            'home_site' => Yii::t('backend', 'Home Site'),
            'school_logo_src' => Yii::t('backend', 'School Logo Src'),
            'country' => Yii::t('backend', 'Country'),
            'address' => Yii::t('backend', 'Address'),
            'inland_phone' => Yii::t('backend', 'Inland Phone'),
            'foreign_phone' => Yii::t('backend', 'Foreign Phone'),
            'email' => Yii::t('backend', 'Email'),
            'created_id' => Yii::t('backend', 'Created ID'),
            'status' => Yii::t('backend', 'Status'),
            'sort' => Yii::t('backend', 'Sort'),
            'created_at' => Yii::t('backend', 'Created At'),
            'updated_at' => Yii::t('backend', 'Updated At'),
            'created_by' => Yii::t('backend', 'Created By'),
            'updated_by' => Yii::t('backend', 'Updated By'),
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeHints()
    {
        return array_merge(parent::attributeHints(), [
            'org_id' => Yii::t('backend', '自增ID'),
            'org_parent_id' => Yii::t('backend', '机构上级ID'),
            'title' => Yii::t('backend', '机构名称'),
            'home_site' => Yii::t('backend', '机构首页'),
            'school_logo_src' => Yii::t('backend', '学校Logo'),
            'country' => Yii::t('backend', '城市'),
            'address' => Yii::t('backend', '地址'),
            'inland_phone' => Yii::t('backend', '国内联系电话'),
            'foreign_phone' => Yii::t('backend', '国外联系电话'),
            'email' => Yii::t('backend', '联系邮箱'),
            'created_id' => Yii::t('backend', '创建者'),
            'status' => Yii::t('backend', '状态'),
            'sort' => Yii::t('backend', '默认与排序'),
            'created_at' => Yii::t('backend', '创建时间'),
            'updated_at' => Yii::t('backend', '更新时间'),
            'created_by' => Yii::t('backend', '创建者'),
            'updated_by' => Yii::t('backend', '更新着'),
        ]);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCourses()
    {
        return $this->hasMany(\backend\modules\org\models\Course::className(), ['org_id' => 'org_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getDormitories()
    {
        return $this->hasMany(\backend\modules\org\models\Dormitory::className(), ['org_id' => 'org_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getOrders()
    {
        return $this->hasMany(\backend\modules\org\models\Order::className(), ['org_id' => 'org_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUserCourses()
    {
        return $this->hasMany(\backend\modules\org\models\UserCourse::className(), ['user_id' => 'org_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUserDormitories()
    {
        return $this->hasMany(\backend\modules\org\models\UserDormitory::className(), ['org_id' => 'org_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUserFlights()
    {
        return $this->hasMany(\backend\modules\org\models\UserFlight::className(), ['org_id' => 'org_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUserToOrgs()
    {
        return $this->hasMany(\backend\modules\org\models\UserToOrg::className(), ['org_id' => 'org_id']);
    }


    
    /**
     * @inheritdoc
     * @return \backend\modules\org\models\query\OrganizationQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new \backend\modules\org\models\query\OrganizationQuery(get_called_class());
    }


    /**
     * get column status enum value label
     * @param string $value
     * @return string
     */
    public static function getStatusValueLabel($value){
        $labels = self::optsStatus();
        if(isset($labels[$value])){
            return $labels[$value];
        }
        return $value;
    }

    /**
     * column status ENUM value labels
     * @return array
     */
    public static function optsStatus()
    {
        return [
            self::STATUS_ACTIVE => Yii::t('backend', 'Active'),
            self::STATUS_CLOSE => Yii::t('backend', 'Close'),
            self::STATUS_DELETE => Yii::t('backend', 'Delete'),
        ];
    }

}
